        <!-- ===== Main Content Start ===== -->
        <main>
          <div class="mx-auto max-w-screen-2xl p-4 md:p-6 2xl:p-10">
            <!-- Breadcrumb Start -->
            <div
              class="mb-6 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between"
            >
              <h2 class="text-title-md2 font-bold text-black dark:text-white">
                Add or Update Product
              </h2>

              <nav>
                <ol class="flex items-center gap-2">
                  <li>
                    <a class="font-medium" href="/">Dashboard /</a>
                  </li>
                  <li class="font-medium text-primary">Add or Update Product</li>
                </ol>
              </nav>
            </div>
            <!-- Breadcrumb End -->

            <!-- ====== Form Elements Section Start -->
<div class="flex flex-col gap-9">
  <!-- Edit Product Form -->
  <div
    class="rounded-sm border border-stroke bg-white shadow-default dark:border-strokedark dark:bg-boxdark"
  >
    <div
      class="border-b border-stroke px-6.5 py-4 dark:border-strokedark"
    >
      <h3 class="font-medium text-black dark:text-white">
        Add or Update Product
      </h3>
    </div>
    <form action="/products/{{product.id}}" method="post" enctype="multipart/form-data">
      <div class="p-6.5">
        <!-- Product Name -->
        <div class="mb-4.5">
          <label
            class="mb-3 block text-sm font-medium text-black dark:text-white"
          >
            Product Name
          </label>
          <input
            required
            type="text"
            name="name"
            value="{{product.name}}"
            placeholder="Enter product name"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
        </div>

        <!-- Product Description -->
        <div class="mb-4.5">
          <label
            class="mb-3 block text-sm font-medium text-black dark:text-white"
          >
            Description
          </label>
          <textarea
            name="description"
            rows="6"
            placeholder="Enter product description"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          >{{product.description}}</textarea>
        </div>

        <!-- Category -->
        <div class="mb-4.5">
          <label class="mb-3 block text-sm font-medium text-black dark:text-white">
            Category
          </label>
          <select
            name="category"
            value="{{product.category}}"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
            required
          >
            <option value="" disabled selected>Select Category</option>
            {{#each categories}}
            <option value="{{this}}" {{#ifEquals this ../product.category}}selected{{/ifEquals}}>
                {{this}}
            </option>
            {{/each}}
          </select>
        </div>

        <!-- Manufacturer -->
        <div class="mb-4.5">
          <label class="mb-3 block text-sm font-medium text-black dark:text-white">
            Manufacturer
          </label>
          <select
            name="manufacturer"
            value="{{product.manufacturer}}"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
            required
          >
            <option value="" disabled selected>Select Manufacturer</option>
            {{#each manufacturers}}
            <option value="{{this}}" {{#ifEquals this ../product.manufacturer}}selected{{/ifEquals}}>
                {{this}}
            </option>
            {{/each}}
          </select>
        </div>

      <!-- Product Price -->
        <div class="mb-4.5">
          <label
            class="mb-3 block text-sm font-medium text-black dark:text-white"
          >
            Original Price
          </label>
          <input
            required
            type="number"
            step="0.1"
            name="originalPrice"
            value="{{product.originalPrice}}"
            placeholder="Enter product price"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
        </div>

        <!-- Product Price -->
        <div class="mb-4.5">
          <label
            class="mb-3 block text-sm font-medium text-black dark:text-white"
          >
            Price
          </label>
          <input
            type="number"
            name="price"
            step="0.1"
            value="{{product.price}}"
            placeholder="Enter product price"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
        </div>

        <!-- Status -->
        <div class="mb-4.5">
          <label class="mb-3 block text-sm font-medium text-black dark:text-white">
            Status
          </label>
          <select
            name="status"
            value="{{product.status}}"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
            required
          >
            <option value="" disabled selected>Select status</option>
            {{#each status}}
            <option value="{{this}}" {{#ifEquals this ../product.status}}selected{{/ifEquals}}>
                {{this}}
            </option>
            {{/each}}
          </select>
        </div>

        <!-- Product Stock -->
        <div class="mb-4.5">
          <label
            class="mb-3 block text-sm font-medium text-black dark:text-white"
          >
            Stock
          </label>
          <input
            required
            type="number"
            name="stock"
            value="{{product.stock}}"
            placeholder="Enter product price"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
        </div>

        <!-- Label -->
        <div class="mb-4.5">
          <label class="mb-3 block text-sm font-medium text-black dark:text-white">
            Label
          </label>
          <select
            name="label"
            value="{{product.label}}"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          >
            <option value="" disabled selected>Select label</option>
            {{#each label}}
            <option value="{{this}}" {{#ifEquals this ../product.label}}selected{{/ifEquals}}>
                {{this}}
            </option>
            {{/each}}
          </select>
        </div>


<!-- Sizes Dropdown -->
<div>
  <label class="mb-3 block text-sm font-medium text-black dark:text-white">
    Sizes
  </label>
  <div>
    <select class="hidden" x-cloak id="sizes-select">
      {{#each sizes}}
      <option value="{{this}}" {{#if ../product}} {{#if (includes ../product.sizes this)}}selected{{/if}} {{/if}}>
        {{this}}
      </option>
      {{/each}}
    </select>
    <div x-data="dropdown('sizes')" x-init="loadOptions()" class="flex flex-col items-center">
      <input name="sizes" type="hidden" :value="selectedValues()" />
      <div class="relative z-20 inline-block w-full">
        <div class="relative flex flex-col items-center">
          <div @click="open" class="w-full">
            <div
              class="mb-2 flex rounded border border-stroke py-2 pl-3 pr-3 outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input">
              <div class="flex flex-auto flex-wrap gap-3">
                <template x-for="(option, index) in selected" :key="index">
                  <div
                    class="my-1.5 flex items-center justify-center rounded border-[.5px] border-stroke bg-gray px-2.5 py-1.5 text-sm font-medium dark:border-strokedark dark:bg-white/30">
                    <div class="max-w-full flex-initial" x-text="options.find(opt => opt.value === option).text"></div>
                    <div class="flex flex-auto flex-row-reverse">
                      <div @click="remove(index, option)" class="cursor-pointer pl-2 hover:text-danger">
                        <svg class="fill-current" role="button" width="12" height="12" viewBox="0 0 12 12"
                          fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M9.35355 3.35355C9.54882 3.15829 9.54882 2.84171 9.35355 2.64645C9.15829 2.45118 8.84171 2.45118 8.64645 2.64645L6 5.29289L3.35355 2.64645C3.15829 2.45118 2.84171 2.45118 2.64645 2.64645C2.45118 2.84171 2.45118 3.15829 2.64645 3.35355L5.29289 6L2.64645 8.64645C2.45118 8.84171 2.45118 9.15829 2.64645 9.35355C2.84171 9.54882 3.15829 9.54882 3.35355 9.35355L6 6.70711L8.64645 9.35355C8.84171 9.54882 9.15829 9.54882 9.35355 9.35355C9.54882 9.15829 9.54882 8.84171 9.35355 8.64645L6.70711 6L9.35355 3.35355Z"
                            fill="currentColor"></path>
                        </svg>
                      </div>
                    </div>
                  </div>
                </template>
                <div x-show="selected.length == 0" class="flex-1">
                  <input placeholder="Select sizes"
                    class="h-full w-full appearance-none bg-transparent p-1 px-2 outline-none" />
                </div>
              </div>
              <div class="flex w-8 items-center py-1 pl-1 pr-1">
                <button type="button" @click="open"
                  class="h-6 w-6 cursor-pointer outline-none focus:outline-none"
                  :class="isOpen() ? 'rotate-180' : ''">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g opacity="0.8">
                      <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M5.29289 8.29289C5.68342 7.90237 6.31658 7.90237 6.70711 8.29289L12 13.5858L17.2929 8.29289C17.6834 7.90237 18.3166 7.90237 18.7071 8.29289C19.0976 8.68342 19.0976 9.31658 18.7071 9.70711L12.7071 15.7071C12.3166 16.0976 11.6834 16.0976 11.2929 15.7071L5.29289 9.70711C4.90237 9.31658 4.90237 8.68342 5.29289 8.29289Z"
                        fill="#637381"></path>
                    </g>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div class="w-full px-4">
            <div x-show.transition.origin.top="isOpen()"
              class="max-h-select absolute top-full left-0 z-40 w-full overflow-y-auto rounded bg-white shadow dark:bg-form-input"
              @click.outside="close">
              <div class="flex w-full flex-col">
                <template x-for="(option, index) in options" :key="index">
                  <div>
                    <div
                      class="w-full cursor-pointer rounded-t border-b border-stroke hover:bg-primary/5 dark:border-form-strokedark"
                      @click="select(index, $event)">
                      <div
                        :class="option.selected ? 'border-primary' : ''"
                        class="relative flex w-full items-center border-l-2 border-transparent p-2 pl-2">
                        <div class="flex w-full items-center">
                          <div class="mx-2 leading-6" x-text="option.text"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


        <!-- Images -->
         <!-- Existing images -->
         {{#each product.images}}
          <input type="hidden" name="existingImages" value="{{this}}" />
        {{/each}}
        <div class="p-4">
  <!-- Image Upload Section -->
  <div
    class="flex flex-col items-center justify-center border-2 border-dashed rounded-md p-6 bg-gray-50 dark:bg-gray-800 dark:border-gray-700"
    id="image-picker-container"
  >
    <input
      type="file"
      id="image-input"
      name="files"
      class="hidden"
      accept="image/png, image/jpeg, image/gif"
      multiple
    />
    <label
      for="image-input"
      class="flex flex-col items-center justify-center cursor-pointer"
    >
      <i class="ri-image-fill"></i>
      <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
        Drag and drop or <span class="text-blue-500 underline">browse</span> to upload
      </p>
      <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
    </label>
  </div>

  <!-- Selected Images Section -->
  <div class="mt-4">
    <h4 class="text-lg font-medium text-gray-800 dark:text-gray-300 mb-2">Selected Images</h4>
    <div
      id="image-preview"
      class="flex gap-4 overflow-x-auto p-2 border rounded-md border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-700"
    >
      <!-- Dynamic Images Will Be Added Here -->
    </div>
  </div>
</div>


        <!-- Material -->
        <div class="mb-4.5">
          <label class="mb-3 block text-sm font-medium text-black dark:text-white">
            Material
          </label>
          <input
            type="text"
            name="material"
            value="{{product.material}}"
            placeholder="Enter material name"
            class="w-full rounded border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal text-black outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
        </div>


<!-- Colors Dropdown -->
<div>
  <label class="mb-3 block text-sm font-medium text-black dark:text-white">
    Colors
  </label>
  <div>
    <select class="hidden" x-cloak id="colors-select">
      {{#each colors}}
      <option value="{{this}}"{{#if ../product}} {{#if (includes ../product.colors this)}}selected{{/if}}{{/if}}>
        {{this}}
      </option>
      {{/each}}
    </select>
    <div x-data="dropdown('colors')" x-init="loadOptions()" class="flex flex-col items-center">
      <input name="colors" type="hidden" :value="selectedValues()" />
      <div class="relative z-20 inline-block w-full">
        <div class="relative flex flex-col items-center">
          <div @click="open" class="w-full">
            <div
              class="mb-2 flex rounded border border-stroke py-2 pl-3 pr-3 outline-none transition focus:border-primary active:border-primary dark:border-form-strokedark dark:bg-form-input">
              <div class="flex flex-auto flex-wrap gap-3">
                <template x-for="(option, index) in selected" :key="index">
                  <div
                    class="my-1.5 flex items-center justify-center rounded border-[.5px] border-stroke bg-gray px-2.5 py-1.5 text-sm font-medium dark:border-strokedark dark:bg-white/30">
                    <div class="max-w-full flex-initial" x-text="options.find(opt => opt.value === option).text"></div>
                    <div class="flex flex-auto flex-row-reverse">
                      <div @click="remove(index, option)" class="cursor-pointer pl-2 hover:text-danger">
                        <svg class="fill-current" role="button" width="12" height="12" viewBox="0 0 12 12"
                          fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M9.35355 3.35355C9.54882 3.15829 9.54882 2.84171 9.35355 2.64645C9.15829 2.45118 8.84171 2.45118 8.64645 2.64645L6 5.29289L3.35355 2.64645C3.15829 2.45118 2.84171 2.45118 2.64645 2.64645C2.45118 2.84171 2.45118 3.15829 2.64645 3.35355L5.29289 6L2.64645 8.64645C2.45118 8.84171 2.45118 9.15829 2.64645 9.35355C2.84171 9.54882 3.15829 9.54882 3.35355 9.35355L6 6.70711L8.64645 9.35355C8.84171 9.54882 9.15829 9.54882 9.35355 9.35355C9.54882 9.15829 9.54882 8.84171 9.35355 8.64645L6.70711 6L9.35355 3.35355Z"
                            fill="currentColor"></path>
                        </svg>
                      </div>
                    </div>
                  </div>
                </template>
                <div x-show="selected.length == 0" class="flex-1">
                  <input placeholder="Select colors"
                    class="h-full w-full appearance-none bg-transparent p-1 px-2 outline-none" />
                </div>
              </div>
              <div class="flex w-8 items-center py-1 pl-1 pr-1">
                <button type="button" @click="open"
                  class="h-6 w-6 cursor-pointer outline-none focus:outline-none"
                  :class="isOpen() ? 'rotate-180' : ''">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g opacity="0.8">
                      <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M5.29289 8.29289C5.68342 7.90237 6.31658 7.90237 6.70711 8.29289L12 13.5858L17.2929 8.29289C17.6834 7.90237 18.3166 7.90237 18.7071 8.29289C19.0976 8.68342 19.0976 9.31658 18.7071 9.70711L12.7071 15.7071C12.3166 16.0976 11.6834 16.0976 11.2929 15.7071L5.29289 9.70711C4.90237 9.31658 4.90237 8.68342 5.29289 8.29289Z"
                        fill="#637381"></path>
                    </g>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div class="w-full px-4">
            <div x-show.transition.origin.top="isOpen()"
              class="max-h-select absolute top-full left-0 z-40 w-full overflow-y-auto rounded bg-white shadow dark:bg-form-input"
              @click.outside="close">
              <div class="flex w-full flex-col">
                <template x-for="(option, index) in options" :key="index">
                  <div>
                    <div
                      class="w-full cursor-pointer rounded-t border-b border-stroke hover:bg-primary/5 dark:border-form-strokedark"
                      @click="select(index, $event)">
                      <div
                        :class="option.selected ? 'border-primary' : ''"
                        class="relative flex w-full items-center border-l-2 border-transparent p-2 pl-2">
                        <div class="flex w-full items-center">
                          <div class="mx-2 leading-6" x-text="option.text"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
        <!-- Submit Button -->
        <button
          type="submit"
          class="flex w-full justify-center rounded bg-primary p-3 font-medium text-gray hover:bg-opacity-90"
        >
          Update Product
        </button>
      </div>
    </form>
  </div>
</div>


            <!-- ====== Form Elements Section End -->
          </div>
        </main>
        <!-- ===== Main Content End ===== -->

    <script>
      function dropdown() {
        return {
          options: [],
          selected: [],
          show: false,
          open() {
            this.show = true;
          },
          close() {
            this.show = false;
          },
          isOpen() {
            return this.show === true;
          },
          select(index, event) {
            if (!this.options[index].selected) {
              this.options[index].selected = true;
              this.options[index].element = event.target;
              this.selected.push(index);
            } else {
              this.selected.splice(this.selected.lastIndexOf(index), 1);
              this.options[index].selected = false;
            }
          },
          remove(index, option) {
            this.options[option].selected = false;
            this.selected.splice(index, 1);
          },
          loadOptions() {
            const options = document.getElementById("select").options;
            for (let i = 0; i < options.length; i++) {
              this.options.push({
                value: options[i].value,
                text: options[i].innerText,
                selected:
                  options[i].getAttribute("selected") != null
                    ? options[i].getAttribute("selected")
                    : false,
              });
            }
          },
          selectedValues() {
            return this.selected.map((option) => {
              return this.options[option].value;
            });
          },
        };
      }
    </script>
<script>
  // JavaScript for Image Picker
  const imageInput = document.getElementById("image-input");
const imagePreview = document.getElementById("image-preview");

// Array to store selected image objects (existing & new images)
let selectedImages = [];

// Preload existing product images
const existingProductImages = {{#if product.images}} {{{json product.images}}} {{else}} [] {{/if}};

// Add existing product images to selectedImages array
existingProductImages.forEach((url) => {
  selectedImages.push({ file: null, url });
});

// Render all images initially
renderImages();

// Event Listener for Input Change
imageInput.addEventListener("change", (e) => {
  const files = Array.from(e.target.files);

  // Append new files to selectedImages
  files.forEach((file) => {
    const reader = new FileReader();

    reader.onload = (event) => {
      selectedImages.push({ file, url: event.target.result }); // Add new file
      renderImages(); // Update preview
      updateFileInput(); // Sync file input
    };

    reader.readAsDataURL(file); // Convert file to Data URL
  });
});

// Function to render images in the preview
function renderImages() {
  imagePreview.innerHTML = ""; // Clear current images

  selectedImages.forEach((image, index) => {
    const imageElement = document.createElement("div");
    imageElement.className =
      "relative flex-shrink-0 w-16 h-16 border rounded-md overflow-hidden";

    // Image Element
    const img = document.createElement("img");
    img.src = image.url;
    img.alt = "Product Image";
    img.className = "w-full h-full object-cover";

    // Remove Button
    const removeBtn = document.createElement("button");
    removeBtn.className =
      "absolute top-1 right-1 bg-red-500 text-white rounded-full p-1";
    removeBtn.innerHTML = "&times;";
    removeBtn.onclick = () => {
      // Remove the image from selectedImages
      selectedImages.splice(index, 1);

      if (!image.file) {
        // Remove existing image input if the image is from the server
        removeExistingImageInput(image.url);
      }

      renderImages(); // Re-render preview
      updateFileInput(); // Sync file input
    };

    imageElement.appendChild(img);
    imageElement.appendChild(removeBtn);
    imagePreview.appendChild(imageElement);
  });
}

// Function to remove an existing image's input field
function removeExistingImageInput(imageUrl) {
  const inputToRemove = document.querySelector(
    `input[type="hidden"][value="${imageUrl}"]`
  );
  if (inputToRemove) {
    inputToRemove.remove();
  }
}

// Function to update the file input dynamically
function updateFileInput() {
  const dataTransfer = new DataTransfer();

  selectedImages.forEach((image) => {
    if (image.file) {
      // Only add new files to the file input
      dataTransfer.items.add(image.file);
    }
  });

  imageInput.files = dataTransfer.files; // Update the file input
  console.log(imageInput.files);
}

</script>

<script>
function dropdown(type) {
  return {
    options: [],
    selected: [],
    show: false,
    async loadOptions() {
      // Get the options based on the type (colors or sizes)
      const select = document.getElementById(`${type}-select`);
      const options = Array.from(select.options);
      this.options = options.map(option => ({
        value: option.value,
        text: option.text,
        selected: option.hasAttribute("selected"),
      }));
      this.selected = this.options.filter((opt) => opt.selected).map((opt) => opt.value);
    },
    open() {
      this.show = true;
    },
    close() {
      this.show = false;
    },
    isOpen() {
      return this.show;
    },
    select(index, event) {
      const option = this.options[index];
      option.selected = !option.selected;

      if (option.selected) {
        this.selected.push(option.value);
      } else {
        this.selected = this.selected.filter(value => value !== option.value);
      }
    },
    remove(index, value) {
      this.options.find(option => option.value === value).selected = false;
      this.selected.splice(index, 1);
    },
    selectedValues() {
      return this.selected.join(',');
    },
  };
}

  </script>
